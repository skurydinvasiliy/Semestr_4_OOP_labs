/**
 * Этот класс представляет один шаг, сгенерированный алгоритмом A * pathfinding.
 * Путевые точки состоят из местоположения, предыдущей путевой точки в пути и некоторых значений стоимости,
 * используемых для определения наилучшего пути.
 **/
public class Waypoint {
    /** Расположение этой путевой точки. **/
    Location loc;

    /** Предыдущая путевая точка в этом пути или <code> null </ code>, если это корень (вершина?) поиска A *. **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость прохода от начальной точки до этой путевой точки через цепочку путевых точек.
     * Это фактическая стоимость следования пути; Не включает никаких оценок.
     **/
    private float prevCost;

    /** В этом поле хранится оценка оставшейся стоимости прохода от этой точки до конечного пункта назначения. **/
    private float remainingCost;

    /**
     * Создайте новую путевую точку для указанного местоположения. При желании можно указать предыдущую путевую точку
     * или указатель может быть <code> null </ code>, чтобы указать, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint) {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation() {
        return loc;
    }
    
    /** Возвращает предыдущую путевую точку в пути или <code> null </ code>, если это начало пути. **/
    public Waypoint getPrevious() {
        return prevWaypoint;
    }
    
    /**
     * Этот метод позволяет установить предыдущую и оставшуюся стоимость в одном вызове метода.
     * Обычно эти значения в любом случае будут установлены одновременно.
     **/
    public void setCosts(float prevCost, float remainingCost) {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /** Возвращает фактическую стоимость достижения этой точки из начального местоположения через ряд точек в этой цепочке. **/
    public float getPreviousCost() {
        return prevCost;
    }

     /**
     * Возвращает оценку общей стоимости для этой путевой точки. Это включает в себя фактическую стоимость проезда к этой точке из начального местоположения,
     * а также оценку оставшейся стоимости проезда от этой точки до конечного пункта назначения.
     **/
    public float getTotalCost() {
        return prevCost + remainingCost;
    }
}

